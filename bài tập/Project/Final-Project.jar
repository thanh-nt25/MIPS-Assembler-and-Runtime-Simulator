.eqv HEADING 0xffff8010 # Integer: An angle between 0 and 359
						# 0 : North (up)
						# 90: East (right)
						# 180: South (down)
						# 270: West (left)

.eqv LEAVETRACK 0xffff8020 # Boolean (0 or non-0):# whether or not to leave a track
.eqv WHEREX 0xffff8030 	# Integer: Current x-location of MarsBot
.eqv WHEREY 0xffff8040 	# Integer: Current y-location of MarsBot
.eqv MOVING 0xffff8050 	# Boolean: whether or not to move

.eqv IN_ADRESS_HEXA_KEYBOARD 0xFFFF0012
.eqv OUT_ADRESS_HEXA_KEYBOARD 0xFFFF0014

.data
#<Góc>, <Thoi gian>, <Track>
# NV: 90, 2000, 0, 180, 10000, 1, 0, 10000, 1, 150, 11800, 1, 0, 9500, 1, 90, 2000, 0, 160, 10000, 1, 20, 10000, 1 
done: .asciiz "done"
postscriptDCE: .word 140, 5000, 0,
		180, 14000, 1, 70, 2747, 1, 40, 2747, 1, 20, 2747, 1, 0, 2747, 1, 340, 2747, 1, 320, 2747, 1, 290, 2747, 1,
		90, 13000, 0,
		260, 4266, 1, 192, 6399, 1, 168, 6399, 1, 100, 4266 ,1
		30, 16165, 0,
		270, 4226, 1, 180, 7000, 1, 90, 4226, 1, 270, 4226, 1, 180, 7000, 1, 90, 4226, 1 #63
postscript2:	.word 150, 3000, 0, 180, 8000, 1, 0, 4000, 1, 90, 5000, 1, 180, 4000, 1, 0, 8000, 1, 90, 3000, 0,
		150, 4618, 1, 180, 4000, 1, 0, 4000, 1, 30, 4618, 1
postscript3:	.word 150, 3000, 0, 90, 4000, 1, 180, 8000, 1, 0, 8000, 1, 90, 4000, 1, 90, 3000 , 0,
		180, 8000, 1, 0, 4000, 1, 90, 5000, 1, 180, 4000, 1, 0, 8000, 1
		
# ------------------------------------ MAIN ------------------------------------------
# ------------------------------------ MAIN ------------------------------------------
# ------------------------------------ MAIN ------------------------------------------
# t0 cho postscript, t2 cho SO PHAN TU
.text
main: 	li $t3, IN_ADRESS_HEXA_KEYBOARD
	li $t4, OUT_ADRESS_HEXA_KEYBOARD
	li $t5, 0x1 
	li $t6, 0x2
	li $t7, 0x4 
	li $t8, 0x8
	
# ================= polling ==================================
polling: 
	sb $t5, 0($t3 ) 
	lb $a0, 0($t4) 
	bnez $a0, call_postscriptDCE
	
	sb $t6, 0($t3 ) 
	lb $a0, 0($t4) 
	bnez $a0, call_postscript2

	sb $t7, 0($t3 ) 
	lb $a0, 0($t4) 
	bnez $a0, call_postscript3
	
	sb $t8, 0($t3 ) 
	lb $a0, 0($t4) 
	bnez $a0, end_main

back_to_polling: j polling # continue polling

# ================ postscript function ==========================
call_postscriptDCE:
	la $t0, postscriptDCE
	li $t2, 63
	j CNC_marsbot

call_postscript2:
	la $t0, postscript2
	li $t2, 33
	j CNC_marsbot
	
call_postscript3:
	la $t0, postscript3
	li $t2, 33
	j CNC_marsbot

# ========================= marsbot algorithms ==================
CNC_marsbot:	
	li $t1, 1 # bien i
	
loop:
	bgt $t1, $t2, turn_to_polling   # Check dieu kien cua i
	
	#lan 3: Track
	lw $a0, 8($t0)
	beqz $a0, un_track
	jal UNTRACK
	jal TRACK
	j continue
un_track: jal UNTRACK
continue:
	# lan 1: quay 
    	lw $a0, 0($t0)       
	jal ROTATE
	jal GO
	
	# lan 2: Thoi gian
	
	lw $a0, 4($t0)
	addi $v0,$zero,32   # truyen tham so cho syscall
	syscall
	
	# xu ly vong lap tiep theo
next_loop:
	addi $t0, $t0, 12 # tang con tro mang
	addi $t1, $t1, 3     # i = i + 1
	j loop

turn_to_polling: 
	jal STOP
	j polling
end_main:
	jal STOP
	la $a0, done
	li $v0, 4
	syscall
	li $v0, 10
	syscall

# ------------------------  Cac ham di chuyen ---------------------------------------------
# ------------------------  Cac ham di chuyen ---------------------------------------------
# ------------------------  Cac ham di chuyen ---------------------------------------------


#-----------------------------------------------------------
# GO procedure, to start running
# param[in] none
#-----------------------------------------------------------
GO: li $at, MOVING # change MOVING port
	addi $k0, $zero,1 # to logic 1,
	sb $k0, 0($at) # to start running
	nop
	jr $ra
	nop
#-----------------------------------------------------------
# STOP procedure, to stop running
# param[in] none
#-----------------------------------------------------------
STOP: li $at, MOVING # change MOVING port to 0
		sb $zero, 0($at) # to stop
		nop
		jr $ra
		nop
#-----------------------------------------------------------
# TRACK procedure, to start drawing line
# param[in] none
#-----------------------------------------------------------
TRACK: li $at, LEAVETRACK # change LEAVETRACK port
		addi $k0, $zero,1 # to logic 1,
		sb $k0, 0($at) # to start tracking
		nop
		jr $ra
		nop
#-----------------------------------------------------------
# UNTRACK procedure, to stop drawing line
# param[in] none
#-----------------------------------------------------------
UNTRACK:li $at, LEAVETRACK # change LEAVETRACK port to 0
		sb $zero, 0($at) # to stop drawing tail
		nop
		jr $ra
		nop
#-----------------------------------------------------------
# ROTATE procedure, to rotate the robot
# param[in] $a0, An angle between 0 and 359
# 0 : North (up)
# 90: East (right)
# 180: South (down)
# 270: West (left)
#-----------------------------------------------------------
ROTATE: li $at, HEADING # change HEADING port
		sw $a0, 0($at) # to rotate robot
		nop
		jr $ra
		nop

