.eqv HEADING 0xffff8010 # Integer: An angle between 0 and 359
						# 0 : North (up)
						# 90: East (right)
						# 180: South (down)
						# 270: West (left)

.eqv LEAVETRACK 0xffff8020 # Boolean (0 or non-0):# whether or not to leave a track
.eqv WHEREX 0xffff8030 	# Integer: Current x-location of MarsBot
.eqv WHEREY 0xffff8040 	# Integer: Current y-location of MarsBot
.eqv MOVING 0xffff8050 	# Boolean: whether or not to move

.data
#<Góc>, <Thoi gian>, <Track>
# NV: 90, 2000, 0, 180, 10000, 1, 0, 10000, 1, 150, 11800, 1, 0, 9500, 1, 90, 2000, 0, 160, 10000, 1, 20, 10000, 1 
postscriptDCE: .word 140, 5000, 0,
		180, 14000, 1, 70, 2747, 1, 40, 2747, 1, 20, 2747, 1, 0, 2747, 1, 340, 2747, 1, 320, 2747, 1, 290, 2747, 1,
		90, 13000, 0,
		260, 4266, 1, 192, 6399, 1, 168, 6399, 1, 100, 4266 ,1
		30, 16165, 0,
		270, 4226, 1, 180, 7000, 1, 90, 4226, 1, 270, 4226, 1, 180, 7000, 1, 90, 4226, 1
# ------------------------------------ MAIN ------------------------------------------
# ------------------------------------ MAIN ------------------------------------------
# ------------------------------------ MAIN ------------------------------------------

.text
main: 
	la $t0, postscriptDCE
	li $t2, 63
	
	li $t1, 1 # bien i
	# jal strlen
	#j end_main
	#add $t2, $zero, $s1 # so phan tu cua mang
	
loop:
	bgt $t1, $t2, end_main   # Check dieu kien cua i
	
	#lan 3: Track
	lw $a0, 8($t0)
	beqz $a0, un_track
	jal UNTRACK
	jal TRACK
	j continue
un_track: jal UNTRACK
continue:
	# lan 1: quay 
    	lw $a0, 0($t0)       
	jal ROTATE
	jal GO
	
	# lan 2: Thoi gian
	
	lw $a0, 4($t0)
	addi $v0,$zero,32   # truyen tham so cho syscall
	syscall
	
	# xu ly vong lap tiep theo
next_loop:
	addi $t0, $t0, 12 # tang con tro mang
	addi $t1, $t1, 3     # i = i + 1
	j loop               
end_main:
	jal STOP
	li $v0, 10
	syscall

# ------------------------  Cac ham di chuyen ---------------------------------------------
# ------------------------  Cac ham di chuyen ---------------------------------------------
# ------------------------  Cac ham di chuyen ---------------------------------------------


#-----------------------------------------------------------
# GO procedure, to start running
# param[in] none
#-----------------------------------------------------------
GO: li $at, MOVING # change MOVING port
	addi $k0, $zero,1 # to logic 1,
	sb $k0, 0($at) # to start running
	nop
	jr $ra
	nop
#-----------------------------------------------------------
# STOP procedure, to stop running
# param[in] none
#-----------------------------------------------------------
STOP: li $at, MOVING # change MOVING port to 0
		sb $zero, 0($at) # to stop
		nop
		jr $ra
		nop
#-----------------------------------------------------------
# TRACK procedure, to start drawing line
# param[in] none
#-----------------------------------------------------------
TRACK: li $at, LEAVETRACK # change LEAVETRACK port
		addi $k0, $zero,1 # to logic 1,
		sb $k0, 0($at) # to start tracking
		nop
		jr $ra
		nop
#-----------------------------------------------------------
# UNTRACK procedure, to stop drawing line
# param[in] none
#-----------------------------------------------------------
UNTRACK:li $at, LEAVETRACK # change LEAVETRACK port to 0
		sb $zero, 0($at) # to stop drawing tail
		nop
		jr $ra
		nop
#-----------------------------------------------------------
# ROTATE procedure, to rotate the robot
# param[in] $a0, An angle between 0 and 359
# 0 : North (up)
# 90: East (right)
# 180: South (down)
# 270: West (left)
#-----------------------------------------------------------
ROTATE: li $at, HEADING # change HEADING port
		sw $a0, 0($at) # to rotate robot
		nop
		jr $ra
		nop
strlen:    
    li $s1, 0                   # Initialize counter to 0, luu tru strlen
    la $t6, postscript                # luu dia chi cua word vao $t6	
    loop_str:
        lw $t5, 0($t6)          # Load a byte from the string
        move $a0, $t5
        li $v0, 1
        syscall
        #beqz $t5, done          # If the byte is zero, end of string reached
        addi $t6, $t6, 4        # Move to the next byte of the string
        addi $s1, $s1, 1        # Increment the counter
    j loop_str                      # Repeat the loop

    done:
        jr $ra                  # Return from the function
